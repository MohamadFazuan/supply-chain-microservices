# Product Service Configuration for Tiong Nam Logistics
spring:
  application:
    name: product-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Database Configuration
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:product_service_db}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Kuala_Lumpur
    username: ${DB_USERNAME:product_user}
    password: ${DB_PASSWORD:product_password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
      pool-name: ProductServiceHikariCP
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          time_zone: Asia/Kuala_Lumpur
          batch_size: 25
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
  
  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 1
    locations: classpath:db/migration
    schemas: product_service_db
    validate-on-migrate: true
  
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    database: ${REDIS_DATABASE:1}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 2000ms
  
  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}
    connection-timeout: 30000
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      retry:
        enabled: true
        initial-interval: 1000
        max-attempts: 3
        max-interval: 10000
        multiplier: 2.0
    listener:
      simple:
        acknowledge-mode: manual
        prefetch: 10
        retry:
          enabled: true
          max-attempts: 3
          initial-interval: 1000
          max-interval: 10000
          multiplier: 2.0
  
  # Caching Configuration
  cache:
    type: redis
    redis:
      time-to-live: 3600000 # 1 hour default
      use-key-prefix: true
      key-prefix: "product-service"
      cache-null-values: false
  
  # JSON Configuration
  jackson:
    time-zone: Asia/Kuala_Lumpur
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSZ
    default-property-inclusion: NON_NULL
    serialization:
      write-dates-as-timestamps: false
      write-date-timestamps-as-nanoseconds: false
    deserialization:
      read-date-timestamps-as-nanoseconds: false

# Server Configuration
server:
  port: ${SERVER_PORT:8083}
  servlet:
    context-path: /product-service
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  tomcat:
    threads:
      max: 200
      min-spare: 10
    connection-timeout: 20000
    keep-alive-timeout: 60000
    max-connections: 8192

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,flyway,caches
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.95,0.99
      sla:
        http.server.requests: 100ms,200ms,500ms,1s,2s
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active}

# Eureka Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 30
    instance-info-replication-interval-seconds: 30
    initial-instance-info-replication-interval-seconds: 40
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 30
    lease-expiration-duration-in-seconds: 90
    instance-id: ${spring.application.name}:${random.uuid}
    metadata-map:
      version: ${project.version:1.0.0}
      git-commit: ${git.commit.id.abbrev:unknown}
      build-time: ${maven.build.timestamp:unknown}

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
    groups:
      enabled: true
  swagger-ui:
    path: /swagger-ui.html
    display-request-duration: true
    groups-order: DESC
    operations-sorter: method
    disable-swagger-default-url: true
    use-root-path: true
  group-configs:
    - group: products
      display-name: Product Management
      paths-to-match: /api/v1/products/**
    - group: categories
      display-name: Category Management  
      paths-to-match: /api/v1/categories/**
    - group: inventory
      display-name: Inventory Management
      paths-to-match: /api/v1/inventory/**

# Feign Configuration
feign:
  client:
    config:
      default:
        connect-timeout: 5000
        read-timeout: 10000
        logger-level: basic
      auth-service:
        connect-timeout: 3000
        read-timeout: 5000
        logger-level: headers
  compression:
    request:
      enabled: true
      mime-types: application/json,application/xml,text/xml,text/plain
    response:
      enabled: true
  httpclient:
    enabled: true
    max-connections: 200
    max-connections-per-route: 50
    time-to-live: 900
    time-to-live-unit: seconds

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      auth-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
      credential-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 60
        wait-duration-in-open-state: 20s
  retry:
    instances:
      auth-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
  timelimiter:
    instances:
      auth-service:
        timeout-duration: 5s
        cancel-running-future: true

# Application Specific Configuration
app:
  product:
    # Caching Configuration
    cache:
      product-details-ttl: 3600 # 1 hour
      product-search-ttl: 1800 # 30 minutes
      category-tree-ttl: 14400 # 4 hours
      inventory-ttl: 900 # 15 minutes
      pricing-ttl: 7200 # 2 hours
    
    # Pagination Configuration
    pagination:
      default-page-size: 20
      max-page-size: 100
    
    # Search Configuration
    search:
      max-results: 1000
      enable-fuzzy-search: true
      fuzzy-threshold: 0.7
    
    # File Upload Configuration
    upload:
      max-file-size: 10MB
      max-request-size: 50MB
      allowed-types: image/jpeg,image/png,application/pdf,application/msword
      storage-path: ${UPLOAD_PATH:/tmp/product-uploads}
    
    # Inventory Configuration
    inventory:
      low-stock-threshold: 10
      reorder-threshold: 25
      enable-automatic-reorder: false
    
    # Pricing Configuration
    pricing:
      enable-dynamic-pricing: true
      discount-calculation-method: tiered
      tax-rate: 0.06 # 6% GST for Malaysia
    
    # Integration Configuration
    integration:
      auth-service:
        url: ${AUTH_SERVICE_URL:http://auth-service}
        timeout: 5000
      credential-service:
        url: ${CREDENTIAL_SERVICE_URL:http://credential-service}
        timeout: 3000

# Logging Configuration
logging:
  level:
    com.supply.chain.microservice.productservice: INFO
    org.springframework.cloud.openfeign: DEBUG
    org.springframework.amqp: INFO
    org.springframework.cache: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.flywaydb: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: logs/product-service.log
    max-size: 100MB
    max-history: 30

---
# Development Profile
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:mysql://localhost:3306/product_service_dev?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Kuala_Lumpur
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
  redis:
    database: 1

logging:
  level:
    com.supply.chain.microservice.productservice: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG

app:
  product:
    upload:
      storage-path: ./uploads/products

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
  h2:
    console:
      enabled: true
  flyway:
    enabled: false
  redis:
    database: 15

eureka:
  client:
    enabled: false

---
# Production Profile
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate
  redis:
    ssl: true
    database: 0

logging:
  level:
    com.supply.chain.microservice.productservice: WARN
    org.springframework: WARN
    org.hibernate.SQL: WARN

management:
  endpoint:
    health:
      show-details: never
