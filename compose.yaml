version: '3.8'

services:
  # Infrastructure Services
  mysql:
    image: mysql:8.0
    container_name: supply-chain-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: supply_chain_db
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: supply-chain-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: supply-chain-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  portainer:
    image: portainer/portainer-ce:latest
    container_name: supply-chain-portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - supply-chain-network

  ollama:
    image: ollama/ollama:latest
    container_name: supply-chain-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: supply-chain-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - supply-chain-network
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservices
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: supply-chain-config-server
    restart: unless-stopped
    ports:
      - "8888:8888"
    networks:
      - supply-chain-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: supply-chain-eureka-server
    restart: unless-stopped
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - supply-chain-network
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: supply-chain-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - supply-chain-network
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: supply-chain-auth-service
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - supply-chain-network
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: supply-chain-product-service
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - supply-chain-network
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672

  credential-service:
    build:
      context: ./credential-service
      dockerfile: Dockerfile
    container_name: supply-chain-credential-service
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - supply-chain-network
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306

  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: supply-chain-ai-service
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    networks:
      - supply-chain-network
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      OLLAMA_BASE_URL: http://ollama:11434

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data:
  portainer_data:
  ollama_data:

networks:
  supply-chain-network:
    driver: bridge
